import time

from telebot import TeleBot
from telebot.types import LabeledPrice

from keyboards import generate_main_menu, generate_message_menu, generate_pagination
from db import PostgreSql

import os


token = os.environ.get("TOKEN")
click_token = os.environ.get("CLICK_TOKEN")

bot = TeleBot(token)
CATALOGS = {
    "üíª–ù–æ—É—Ç–±—É–∫–∏": "laptops"
}


@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    bot.send_message(chat_id, f'–ü—Ä–∏–≤–µ—Ç {first_name} !')
    choose_catalog(message)


def choose_catalog(message):
    chat_id = message.chat.id
    user_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ : ", reply_markup=generate_main_menu())
    bot.register_next_step_handler(user_message, show_products)


def search_catalog(name_catalog):
    return PostgreSql().select_data(name_catalog)


def show_products(message, product_id=0, products=None):
    chat_id = message.chat.id

    bot.delete_message(chat_id, message.id - 1)
    if message.text == "üîô–ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É":
        choose_catalog(message)
        return

    if message.text in CATALOGS.keys() and not products:
        name_catalog = CATALOGS[message.text]
        products = search_catalog(name_catalog)


    if message.text == "‚è©–î–∞–ª–µ–µ" and product_id < len(products):
        product_id += 1

    elif message.text == "‚è™–ù–∞–∑–∞–¥" and product_id > 0:
        product_id -= 1

    product = products[product_id]

    brand_name = product[0]
    url = product[1]
    product_image = product[2]
    product_price = product[3]
    configurations = product[4]
    bot.send_message(chat_id, "Catalog product")
    bot.send_photo(chat_id, product_image, caption=f"üíª–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:  {brand_name}\n\nüíµ–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –∑–∞ –º–µ—Å—è—Ü:  {product_price}\n\nüìâ–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:  {configurations}",
                   reply_markup=generate_message_menu(url))

    user_message = bot.send_message(chat_id, f"–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ—Å—Ç–∞–ª–æ—Å—å : {len(products) - (product_id + 1)}", reply_markup=generate_pagination())

    if message.text == "‚è©–î–∞–ª–µ–µ" and len(products) - (product_id + 1) == 0:
        bot.send_message(chat_id, "–ù–∞ —Å–∫–ª–∞–¥–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å!")
        product_id -= len(products)

    bot.register_next_step_handler(user_message, show_products, product_id, products)


@bot.callback_query_handler(func=lambda call: True)
def get_callback_data(call):
    chat_id = call.message.chat.id
    if call.data == "buy":
        product_info = call.message.caption
        product_price = product_info[1]
        INVOICE = {
            "title": product_info[0],
            "description": product_info[2],
            "invoice_payload": "bot-defined invoice payload",
            "provider_token": click_token,
            "start_parameter": "pay",
            "currency": "UZS",
            "prices": [LabeledPrice(label=product_info[0], amount=int(product_price + "00"))],
        }

        bot.send_invoice(chat_id, **INVOICE)


@bot.pre_checkout_query_handler(func=lambda query: True)
def invoice_checkout(query):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞ """
    bot.answer_pre_checkout_query(query.id, ok=True, error_message="–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã !")


@bot.message_handler(content_types=["successful_payment"])
def successful_payment(message):
    """ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ """
    bot.send_message(message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ !")


while True:
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω !")
        bot.polling(none_stop=True)
    except Exception as exp:
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {exp.__class__.__name__}: {exp}')
        bot.stop_polling()
        time.sleep(5)